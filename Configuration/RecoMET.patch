? RecoMET/Configuration/python/RecoMET_cff.py.original
? RecoMET/Configuration/python/__init__.py
? RecoMET/METAlgorithms/interface/TCMETAlgo.h.original
? RecoMET/METAlgorithms/src/TCMETAlgo.cc.original
? RecoMET/METProducers/python/TCMET_cfi.py.original
? RecoMET/METProducers/python/__init__.py
Index: RecoMET/Configuration/python/RecoMET_cff.py
===================================================================
RCS file: /cvs_server/repositories/CMSSW/CMSSW/RecoMET/Configuration/python/RecoMET_cff.py,v
retrieving revision 1.2.2.1.2.1.2.2
diff -u -r1.2.2.1.2.1.2.2 RecoMET_cff.py
--- RecoMET/Configuration/python/RecoMET_cff.py	30 Oct 2008 16:30:52 -0000	1.2.2.1.2.1.2.2
+++ RecoMET/Configuration/python/RecoMET_cff.py	5 Feb 2009 20:05:36 -0000
@@ -1,18 +1,30 @@
 import FWCore.ParameterSet.Config as cms
 
 # Name:   RecoMET.cff
-# Author: R.Cavanaugh
-# Date:   28.10.2008
-# Notes:  CaloMET.cfi assumes that a product with label "towerMaker" is 
+# Original Author: R.Cavanaugh
+# Date:   05.11.2006
+# Notes:  CaloMET.cfi assumes that a product with label "caloTowers" is
 #         already written into the event.
+# Modification by F. Ratnikov and R. Remington
+# Date: 10/21/08 
+# Addition of MET significance by F.Blekman
+# Date: 10/23/08
+
 from RecoJets.Configuration.CaloTowersES_cfi import *
 from RecoMET.METProducers.CaloTowersOpt_cfi import *
 from RecoMET.METProducers.CaloMET_cfi import *
 from RecoMET.METProducers.HTMET_cfi import *
-#sequence metreco = {met, htMetIC5, htMetMC5}
+#from RecoMET.METProducers.CaloMETSignif_cfi import *
+from RecoMET.METProducers.TCMET_cfi import *
+from JetMETCorrections.Type1MET.MetMuonCorrections_cff import *
+#from Configuration.StandardSequences.Geometry_cff import *
+from Geometry.CommonDetUnit.globalTrackingGeometry_cfi import *
+from TrackingTools.TrackAssociator.DetIdAssociatorESProducer_cff import *
+
+#sequence metreco = {met, metsig, htMetIC5, htMetMC5}
 metreco = cms.Sequence(
-    met+metNoHF+metHO+metNoHFHO+
-    calotoweroptmaker+metOpt+metOptNoHF+calotoweroptmakerWithHO+metOptHO+metOptNoHFHO+
-    htMetSC5+htMetSC7+htMetKT4+htMetKT6+htMetIC5
-    )
+        met+metNoHF+metHO+metNoHFHO+
+            calotoweroptmaker+metOpt+metOptNoHF+calotoweroptmakerWithHO+metOptHO+metOptNoHFHO+
+            htMetSC5+htMetSC7+htMetKT4+htMetKT6+htMetIC5+MetMuonCorrections+tcMet
+            )
 
Index: RecoMET/METAlgorithms/interface/TCMETAlgo.h
===================================================================
RCS file: /cvs_server/repositories/CMSSW/CMSSW/RecoMET/METAlgorithms/interface/TCMETAlgo.h,v
retrieving revision 1.7.2.2
diff -u -r1.7.2.2 TCMETAlgo.h
--- RecoMET/METAlgorithms/interface/TCMETAlgo.h	1 Dec 2008 00:25:29 -0000	1.7.2.2
+++ RecoMET/METAlgorithms/interface/TCMETAlgo.h	5 Feb 2009 20:05:36 -0000
@@ -36,9 +36,14 @@
 #include "DataFormats/MuonReco/interface/MuonFwd.h"
 #include "DataFormats/TrackReco/interface/Track.h"
 #include "DataFormats/TrackReco/interface/TrackFwd.h"
+#include "DataFormats/TrackingRecHit/interface/TrackingRecHit.h"
+#include "DataFormats/TrackingRecHit/interface/TrackingRecHitFwd.h"
 #include "DataFormats/METReco/interface/CaloMET.h"
 #include "DataFormats/METReco/interface/CaloMETCollection.h"
+#include "DataFormats/BeamSpot/interface/BeamSpot.h"
 #include "TH2D.h"
+#include "DataFormats/Math/interface/Vector.h"
+#include "TMath.h"
 
 class TCMETAlgo 
 {
@@ -58,6 +63,7 @@
   edm::Handle<reco::PixelMatchGsfElectronCollection> ElectronHandle;
   edm::Handle<reco::CaloMETCollection> metHandle;
   edm::Handle<reco::TrackCollection> TrackHandle;
+  edm::Handle<reco::BeamSpot> BeamSpotHandle;
 
   const class MagneticField* bField;
 
@@ -66,12 +72,11 @@
   bool isMuon( unsigned int );
   bool isElectron( unsigned int ); 
   bool isGoodTrack( const reco::Track& );
-  void correctMETforMuon( const reco::Track& );
-  void correctSumEtForMuon( const reco::Track& );
   void correctMETforTrack( const reco::Track& );
-  void correctSumEtForTrack( const reco::Track&);
+  void correctSumEtForTrack( const reco::Track& );
   class TVector3 propagateTrack( const reco::Track& );
-
+  //float sharedHits( const reco::Track&, const reco::GsfTrack& );
+  //  double deltaR(const Vector& , const Vector&);
 };
 
 #endif // TCMETAlgo_h
Index: RecoMET/METAlgorithms/src/TCMETAlgo.cc
===================================================================
RCS file: /cvs_server/repositories/CMSSW/CMSSW/RecoMET/METAlgorithms/src/TCMETAlgo.cc,v
retrieving revision 1.7.2.2
diff -u -r1.7.2.2 TCMETAlgo.cc
--- RecoMET/METAlgorithms/src/TCMETAlgo.cc	1 Dec 2008 00:23:42 -0000	1.7.2.2
+++ RecoMET/METAlgorithms/src/TCMETAlgo.cc	5 Feb 2009 20:05:37 -0000
@@ -24,6 +24,8 @@
 #include "DataFormats/METReco/interface/CaloMET.h"
 #include "DataFormats/METReco/interface/CaloMETCollection.h"
 
+#include "DataFormats/BeamSpot/interface/BeamSpot.h"
+
 #include "TrackingTools/TrajectoryState/interface/TrajectoryStateOnSurface.h"
 #include "TrackingTools/GeomPropagators/interface/AnalyticalPropagator.h"
 #include "MagneticField/Engine/interface/MagneticField.h"
@@ -33,6 +35,8 @@
 #include "DataFormats/GeometrySurface/interface/Cylinder.h"
 #include "DataFormats/GeometryVector/interface/GlobalPoint.h"
 #include "DataFormats/GeometryVector/interface/GlobalVector.h"
+#include "DataFormats/Math/interface/Point3D.h"
+#include "DataFormats/GsfTrackReco/interface/GsfTrack.h"
 #include "Math/GenVector/VectorUtil.h"
 
 #include <cmath>
@@ -40,13 +44,18 @@
 #include "TVector3.h"
 #include "TH2.h"
 
+typedef math::XYZPoint Point;
 using namespace std;
 using namespace reco;
 
+//static FILE *file = fopen("/home/users/fgolf/test/CMSSW_2_2_3/src/CMS2/NtupleMaker/test/blah.log", "w");
+
 //------------------------------------------------------------------------
 // Default Constructer
 //----------------------------------
-TCMETAlgo::TCMETAlgo() {}
+TCMETAlgo::TCMETAlgo() {
+  //fprintf(file, "hello world\n");
+}
 //------------------------------------------------------------------------
 
 //------------------------------------------------------------------------
@@ -57,6 +66,11 @@
 
 reco::MET TCMETAlgo::CalculateTCMET(edm::Event& event, const edm::EventSetup& setup, const edm::ParameterSet& iConfig, TH2D* response_function)
 { 
+  // remember response function
+  TCMETAlgo::response_function = response_function;
+
+  //  exit (0);
+
   //Get Appropriate Handles for TCMET Calculation
 
   event.getByLabel( iConfig.getParameter<edm::InputTag>("muonLabel") , MuonHandle);
@@ -66,43 +80,42 @@
   event.getByLabel( iConfig.getParameter<edm::InputTag>("metLabel") , metHandle);
   const CaloMETCollection *calometcol = metHandle.product();
   const CaloMET calomet = calometcol->front();
+  
+  event.getByLabel( iConfig.getParameter<edm::InputTag>("beamSpotLabel"), BeamSpotHandle);
 
   edm::ESHandle<MagneticField> theMagField;
   setup.get<IdealMagneticFieldRecord>().get(theMagField);
   bField = theMagField.product();
 
-  //  response_function = getResponseFunction();
-  //  response_function = repsonseFunction_->Clone();
-
   //intialize MET, sumEt to caloMET values
 
-  double met_x = calomet.et() * cos( calomet.phi() );
-  double met_y = calomet.et() * sin( calomet.phi() );
-  double sumEt = calomet.sumEt();
+  met_x = calomet.et() * cos( calomet.phi() );
+  met_y = calomet.et() * sin( calomet.phi() );
+  sumEt = calomet.sumEt();
+
+  //fprintf(file, "metMuonCorr = %f\n", calomet.et());
 
   //calculate tcMET
 
   for(reco::TrackCollection::const_iterator track_it = TrackHandle->begin(); track_it != TrackHandle->end(); ++track_it) {
 
+    //fprintf(file, "looping over track %d...\n", (track_it - TrackHandle->begin()) );
 
     if( isMuon( track_it - TrackHandle->begin() ) ) {
-      correctMETforMuon( *track_it );
-      correctSumEtForMuon( *track_it );
+      //fprintf(file, "found a muon!\n"); 
+      continue;}
+
+    if( isElectron( track_it - TrackHandle->begin() ) ) {
+      //fprintf(file, "found an electron!\n");
       continue;
     }
 
-
-    if( isElectron( track_it - TrackHandle->begin() ) ) continue;
-
-
     if( !isGoodTrack( *track_it ) ) continue;
 
-
     correctMETforTrack( *track_it );
     correctSumEtForTrack( *track_it );
   }
 
-
   //fill tcMET object
 
   CommonMETData TCMETData;
@@ -113,9 +126,12 @@
   TCMETData.sumet = sumEt;
   TCMETData.phi   = atan2( met_y, met_x ); 
 
+  //fprintf(file, "tcmet = %f\n", sqrt( met_x * met_x + met_y * met_y ) );
+
   math::XYZTLorentzVector p4( TCMETData.mex , TCMETData.mey , 0, TCMETData.met);
   math::XYZPointD vtx(0,0,0);
   reco::MET tcmet(TCMETData.sumet, p4, vtx);
+
   return tcmet;
 //------------------------------------------------------------------------
 }
@@ -138,23 +154,66 @@
 
 bool TCMETAlgo::isElectron( unsigned int trk_idx ) {
 
+    int tmp_ele_trk_idx = 0;
+    double tmp_deltaR =0 ;
+    unsigned int index = 0;
+    double els_phi = 0;
+    double els_eta = 0;
+    double delta_phi = 0;
+    double delta_eta = 0;
+    double deltaR = 0;
+
   for(reco::PixelMatchGsfElectronCollection::const_iterator electron_it = ElectronHandle->begin(); electron_it != ElectronHandle->end(); ++electron_it) {
 
-    unsigned int ele_idx = electron_it->track().isNonnull() ? electron_it->track().index() : 999999;
+    tmp_ele_trk_idx = -1;
+    deltaR = 999.;
+    index = 0;
+
+    if( electron_it->hadronicOverEm() < 0.1 ) {
+
+      els_phi = electron_it->gsfTrack().get()->phi();
+      els_eta = electron_it->gsfTrack().get()->eta();
+
+      //fprintf(file, "electron pt = %f\t\t electron eta = %f\t\t electron phi = %f\n", electron_it->gsfTrack().get()->pt(), electron_it->gsfTrack().get()->eta(), electron_it->gsfTrack().get()->phi() );
 
-    if( ele_idx == trk_idx ) {
-      if( electron_it->hadronicOverEm() < 0.1 ) 
-	return true;
+      for(reco::TrackCollection::const_iterator trk_it = TrackHandle->begin(); trk_it != TrackHandle->end(); ++trk_it) {
+
+	delta_phi = acos( cos( els_phi - trk_it->phi() ) );
+	delta_eta = els_eta - trk_it->eta();
+
+	tmp_deltaR = TMath::Sqrt( delta_phi * delta_phi + delta_eta * delta_eta );
+
+	//fprintf(file, "track pt = %f\t\t track eta = %f\t\t track phi = %f\t\t deltaR = %f\n", trk_it->pt(), trk_it->eta(), trk_it->phi(), tmp_deltaR );
+
+	if( tmp_deltaR < deltaR ) {
+	  deltaR = tmp_deltaR;
+	  tmp_ele_trk_idx = index;
+	}
+
+	++index;
+      }
     }
+
+    if( ( tmp_ele_trk_idx == trk_idx ) && ( deltaR < 0.1 ) ) return true;
+
   }
 
   return false;
 }
 
+
 //determines if track is "good" - i.e. passes quality and kinematic cuts
 
 bool TCMETAlgo::isGoodTrack( const reco::Track& track ) {
-  if( fabs( track.d0() ) > 0.05 ) return false;
+  
+  // get d0 corrected for beam spot
+  bool haveBeamSpot = true;
+  if( !BeamSpotHandle.isValid() ) haveBeamSpot = false;
+
+  Point bspot = haveBeamSpot ? BeamSpotHandle->position() : Point(0,0,0);
+  double d0 = -1 * track.dxy( bspot );
+
+  if( fabs( d0 ) > 0.05 ) return false;
   if( track.numberOfValidHits() < 7 ) return false;
   if( track.normalizedChi2() > 5 ) return false;
   if( fabs( track.eta() ) > 2.4 ) return false;
@@ -163,19 +222,6 @@
   else return true;
 }
 
-//correct MET for muon
-
-void TCMETAlgo::correctMETforMuon( const reco::Track& track ) {
-  met_x -= track.pt() * cos( track.phi() );
-  met_y -= track.pt() * sin( track.phi() );
-}
-
-//correct sumEt for muon
-
-void TCMETAlgo::correctSumEtForMuon( const reco::Track& track ) {
-  sumEt += track.pt();
-}
-
 //correct MET for track
 
 void TCMETAlgo::correctMETforTrack( const reco::Track& track ) {
@@ -197,6 +243,7 @@
     met_y += ( fracTrackEnergy * track.p() * sin( outerTrackPosition.Theta() ) * sin( outerTrackPosition.Phi() ) //remove expected amount of energy track deposited in calorimeter
 	       - track.pt() * sin( track.phi() ) );  //add track at vertex
   }  
+
 }
 
 //correct sumEt for track
@@ -1730,3 +1777,4 @@
 
    return single_pion_rf;
 }
+
Index: RecoMET/METProducers/python/TCMET_cfi.py
===================================================================
RCS file: /cvs_server/repositories/CMSSW/CMSSW/RecoMET/METProducers/python/TCMET_cfi.py,v
retrieving revision 1.2.2.2
diff -u -r1.2.2.2 TCMET_cfi.py
--- RecoMET/METProducers/python/TCMET_cfi.py	1 Dec 2008 16:05:45 -0000	1.2.2.2
+++ RecoMET/METProducers/python/TCMET_cfi.py	5 Feb 2009 20:05:37 -0000
@@ -9,15 +9,17 @@
 tcMet = cms.EDProducer(
     "METProducer",
     src = cms.InputTag("towerMaker"), #This parameter does not get used for TCMET
-    METType = cms.string('MET'),
+    METType = cms.string('TCMET'),
     alias = cms.string('TCMET'),
     noHF = cms.bool(False),
     globalThreshold = cms.double(0.0),
     InputType = cms.string('CaloMET:Electron:Muon:Track'),  #This parameter does not get used for TCMET  
     electronLabel = cms.InputTag("pixelMatchGsfElectrons"),
-    muonLabel     = cms.InputTag("muons"),
-    trackLabel    = cms.InputTag("tracks"),
-    metLabel      = cms.InputTag("met")
+#    muonLabel     = cms.InputTag("goodMuonsforMETCorrection"),
+    muonLabel     = cms.InputTag("goodMusForMETCorr"),
+    trackLabel    = cms.InputTag("generalTracks"),
+    metLabel      = cms.InputTag("corMetGlobalMuons"),
+    beamSpotLabel = cms.InputTag("offlineBeamSpot")
     )
 
 
